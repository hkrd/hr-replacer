{
    "topics": {
        "Python": [
            "What are Python's built-in data types, and how would you choose which one to use in a given situation?",
            "Can you explain what a Python decorator is and provide an example of how you might use one?",
            "How does Python handle memory management, and what is garbage collection?",
            "What are list comprehensions in Python, and can you provide an example of how they are used?",
            "Explain the difference between a shallow copy and a deep copy in Python. When would you use each?",
            "What is the difference between '==' and 'is' in Python?",
            "Can you explain the purpose of the `__init__` method in Python classes?",
            "What are Python's different ways to handle errors and exceptions? Provide examples of `try`, `except`, and `finally` blocks.",
            "How does Python's Global Interpreter Lock (GIL) affect multi-threading?",
            "What is the difference between a Python module and a Python package?",
            "How do you manage dependencies in a Python project? Have you used tools like `pip` or `poetry`?",
            "What is the purpose of Python's `with` statement? How does it relate to context managers?",
            "Explain the concept of inheritance in Python and provide a simple example.",
            "How do you optimize the performance of a Python program? What tools or techniques do you use?",
            "What are Python generators, and how do they differ from regular functions? Can you provide an example?",
            "How do you work with external libraries in Python? Can you give an example of using a popular library?",
            "What is the purpose of the `self` keyword in Python class methods?",
            "How do you handle file operations in Python? Can you provide examples of reading from and writing to files?",
            "What are some common Python idioms or best practices you follow in your code?"
        ],
        "Java": [
            "What are the main differences between Java and other programming languages like Python or C++?",
            "Can you explain what Java's garbage collection is and how it works?",
            "What is the purpose of the `final` keyword in Java? Provide examples of its usage.",
            "How does Java handle memory management and object allocation?",
            "What are the different types of access modifiers in Java and what do they mean?",
            "Explain the concept of inheritance in Java. How does it work and what are its benefits?",
            "What is polymorphism in Java and how can it be implemented?",
            "What are Java interfaces and how are they different from abstract classes?",
            "Can you describe the Java Collections Framework? Name some commonly used collections.",
            "How does Java achieve platform independence?",
            "What is the difference between `ArrayList` and `LinkedList` in Java?",
            "What are the differences between `HashMap` and `TreeMap` in Java?",
            "What is the significance of the `synchronized` keyword in Java?",
            "Explain the concept of exception handling in Java. What is the difference between checked and unchecked exceptions?",
            "What are Java streams and how do they simplify working with collections?",
            "How do you implement multi-threading in Java? What are the key classes and interfaces used?",
            "What is the `Java Virtual Machine (JVM)` and how does it relate to Java code execution?",
            "Explain what a Java `constructor` is and how it differs from a `method`.",
            "What is the difference between `==` and `.equals()` in Java?"
        ],
        "Go": [
            "What are the key features that make Go different from other programming languages like Python or Java?",
            "Can you explain Go's concurrency model and how goroutines work?",
            "What are Go interfaces, and how do they differ from interfaces in other languages?",
            "How does Go handle memory management and garbage collection?",
            "What is the purpose of the `defer` keyword in Go? Can you provide an example of its usage?",
            "Explain the difference between a pointer and a value receiver in Go methods.",
            "What is a Go slice, and how is it different from an array?",
            "How do you manage dependencies in a Go project? Have you used tools like `go mod`?",
            "What is the Go standard library, and can you name a few important packages it provides?",
            "How do Go's error handling and error types work? What's the idiomatic way to handle errors?",
            "What is the difference between the `var` and `const` keywords in Go?",
            "How do Go channels work, and how would you use them in a concurrent program?",
            "What is the purpose of the `select` statement in Go? Can you provide an example?",
            "How do you implement and use custom data types in Go?",
            "What are Go's rules for visibility of identifiers? How does it affect package design?",
            "How does Go handle struct embedding and composition?",
            "What are some common Go idioms or best practices you follow in your code?",
            "Explain the concept of Go's garbage collection. How does it affect performance?",
            "How do you perform testing in Go? What tools or packages do you use for testing?"
        ],
        "JavaScript": [
            "What are the differences between `var`, `let`, and `const` in JavaScript?",
            "Can you explain the concept of hoisting in JavaScript?",
            "What is a JavaScript closure, and how is it used?",
            "How does the `this` keyword work in JavaScript? Can you provide examples of its different contexts?",
            "What is the difference between `==` and `===` in JavaScript?",
            "Can you explain event delegation and how it is used in JavaScript?",
            "What are promises in JavaScript, and how do they work? Can you provide an example?",
            "How do async functions and the `await` keyword work in JavaScript?",
            "What is the purpose of the `bind`, `call`, and `apply` methods in JavaScript?",
            "How does JavaScript handle asynchronous operations? What are callbacks, promises, and async/await?",
            "What are JavaScript's data types and how are they handled? What is type coercion?",
            "How do you handle errors and exceptions in JavaScript? What is the role of `try`, `catch`, and `finally`?",
            "What is the event loop, and how does it affect JavaScript execution?",
            "Can you explain the concept of prototypal inheritance in JavaScript?",
            "What are JavaScript modules, and how do you import and export functionality between files?",
            "How do you manipulate the DOM using JavaScript? Can you provide an example?",
            "What is the difference between synchronous and asynchronous code in JavaScript?",
            "What are JavaScript template literals and how are they used?",
            "How do you perform performance optimization in JavaScript applications? What tools or techniques do you use?"
        ],
        "TypeScript": [
            "What are the main benefits of using TypeScript over JavaScript?",
            "Can you explain the concept of type annotations in TypeScript? How do they help in development?",
            "What is the difference between `interface` and `type` in TypeScript?",
            "How does TypeScript handle union and intersection types? Can you provide examples?",
            "What are generics in TypeScript, and how do you use them?",
            "How do TypeScript's `any` and `unknown` types differ, and when would you use each?",
            "Can you explain the concept of type inference in TypeScript? How does it work?",
            "What is the purpose of the `never` type in TypeScript? Provide an example of its usage.",
            "How do you define and use classes in TypeScript? What are the key differences from JavaScript classes?",
            "What are TypeScript decorators, and how are they used in the language?",
            "How does TypeScript handle module resolution? What are `import` and `export` statements?",
            "What are the benefits and limitations of TypeScripts strict mode?",
            "How do you perform type checking for asynchronous code in TypeScript?",
            "Can you explain the role of `tsconfig.json` and how to configure it for a TypeScript project?",
            "How do you work with external libraries and type definitions in TypeScript?",
            "What is the difference between `public`, `private`, and `protected` access modifiers in TypeScript classes?",
            "How does TypeScript support type-safe programming with enums and tuples?",
            "What is the role of `Partial<T>`, `Required<T>`, and other utility types in TypeScript?",
            "How do you handle type assertions and type guards in TypeScript?"
        ],
        "Kotlin": [
            "What are the main features of Kotlin that differentiate it from Java?",
            "Can you explain Kotlin's null safety and how it helps prevent null pointer exceptions?",
            "What are Kotlin data classes, and how are they used? Can you provide an example?",
            "How does Kotlin handle type inference? Provide an example of its usage.",
            "What is the purpose of Kotlin's `sealed` classes, and how do they work?",
            "How do you define and use extension functions in Kotlin? Can you give an example?",
            "What are Kotlin coroutines, and how do they simplify asynchronous programming?",
            "Can you explain the difference between `var`, `val`, and `lateinit` in Kotlin?",
            "How does Kotlin support functional programming? What are higher-order functions and lambdas?",
            "What is the difference between `==` and `===` in Kotlin?",
            "How do Kotlin's `when` expressions work, and how do they compare to `switch` statements in other languages?",
            "What are Kotlin's collection types and how do you perform common operations on them?",
            "How does Kotlin handle generics? What are reified types and how are they used?",
            "Can you explain Kotlin's approach to inheritance and how it differs from Java?",
            "What are Kotlin's `object` declarations and how do they differ from classes?",
            "How do you work with Kotlin's standard library and what are some of the most commonly used functions?",
            "What are Kotlin's `companion objects` and how do they differ from static methods in Java?",
            "How does Kotlin handle delegation and what is its `by` keyword used for?",
            "What is the role of the `suspend` keyword in Kotlin, and how does it relate to coroutines?"
        ],
        "C++": [
            "What are the main differences between C++ and C?",
            "Can you explain the concept of RAII (Resource Acquisition Is Initialization) in C++?",
            "How does C++ handle memory management, and what are pointers and references?",
            "What are the differences between `new` and `malloc` in C++?",
            "Can you explain the purpose of constructors and destructors in C++? How are they used?",
            "What is the difference between shallow copy and deep copy in C++?",
            "How do C++ templates work, and how are they different from macros?",
            "What are virtual functions and how do they support polymorphism in C++?",
            "What is the role of the `const` keyword in C++, and how is it used?",
            "How does C++ handle exception handling? What are `try`, `catch`, and `throw`?",
            "What are the different types of inheritance in C++, and what are their use cases?",
            "Can you explain the concept of operator overloading and provide an example?",
            "What are C++ smart pointers, and how do they differ from raw pointers?",
            "How does the C++ Standard Library support containers and algorithms? Can you name a few?",
            "What are namespaces in C++, and how do they help manage code organization?",
            "How does C++ support multiple inheritance, and what issues might arise?",
            "Can you explain the differences between `public`, `protected`, and `private` access specifiers in C++?",
            "What are the differences between `struct` and `class` in C++?",
            "How does C++ handle dynamic memory allocation, and what are the potential pitfalls?"
        ],
        "C#": [
            "What are the main differences between C# and other programming languages like Java or C++?",
            "Can you explain the concept of garbage collection in C# and how it works?",
            "What are the differences between `struct` and `class` in C#?",
            "How does C# support object-oriented programming? Can you explain inheritance, polymorphism, and encapsulation?",
            "What is the purpose of the `async` and `await` keywords in C#, and how do they facilitate asynchronous programming?",
            "How do C# properties differ from fields, and how are they used?",
            "What are delegates in C#, and how do they differ from events and lambdas?",
            "Can you explain the concept of LINQ and provide an example of how it is used in C#?",
            "What are extension methods in C#, and how are they implemented?",
            "How does C# handle exception handling? What are `try`, `catch`, `finally`, and `throw`?",
            "What are the different types of collections available in C# and their typical use cases?",
            "What is the `using` statement in C#, and how does it relate to resource management?",
            "How does C# support multi-threading and parallel programming? What are `Task` and `Thread`?",
            "What is the role of interfaces in C# and how do they differ from abstract classes?",
            "How does C# implement dependency injection, and what benefits does it provide?",
            "What are attributes in C#, and how are they used to add metadata to classes and methods?",
            "Can you explain the difference between `public`, `private`, `protected`, and `internal` access modifiers in C#?",
            "What is the difference between `ref` and `out` parameters in C#?",
            "How does C# handle memory management, and what are some common performance considerations?"
        ],
        "Rust": [
            "What are the main features of Rust that differentiate it from other programming languages?",
            "Can you explain Rust's ownership system and how it helps manage memory safety?",
            "How do Rust's borrowing and reference rules work, and what are mutable and immutable references?",
            "What is a Rust `struct`, and how do you define and use them?",
            "Can you explain the concept of Rust's `trait` and how it is used for polymorphism?",
            "What are enums in Rust, and how do they differ from enums in other languages?",
            "How does Rust handle error handling with `Result` and `Option` types? Provide examples.",
            "What are Rust's lifetimes, and how do they help ensure memory safety?",
            "Can you explain Rust's pattern matching and how it is used with `match` and `if let` statements?",
            "How do you manage concurrency in Rust, and what role do threads and async functions play?",
            "What is the purpose of Rust's `unsafe` keyword, and when should it be used?",
            "How does Rust's ownership and borrowing system affect function arguments and return values?",
            "What are Rust's `Box`, `Rc`, and `Arc` types, and how are they used for memory management?",
            "How do you handle asynchronous programming in Rust? What are `async` functions and `await`?",
            "What are Rust's modules and how do you use them to organize code?",
            "Can you explain the difference between `move`, `copy`, and `borrow` semantics in Rust?",
            "How does Rust support functional programming features, such as closures and iterators?",
            "What are the common use cases for Rust's `Vec` and `HashMap` types?",
            "How do you perform unit testing in Rust? What testing frameworks or tools do you use?"
        ],
        "Scala": [
            "What are the key features of Scala that differentiate it from Java or other programming languages?",
            "Can you explain the concept of Scala's case classes and how they are used?",
            "What are Scala traits, and how do they differ from Java interfaces?",
            "How does Scala handle immutability, and what are the benefits of using immutable collections?",
            "Can you explain the concept of pattern matching in Scala? Provide an example of its use.",
            "What are Scala's higher-order functions, and how are they used in functional programming?",
            "How does Scala support type inference, and how does it affect code readability and safety?",
            "What are Scala's for-comprehensions, and how do they relate to monads?",
            "Can you explain the difference between `val`, `var`, and `def` in Scala?",
            "How does Scala support functional programming and object-oriented programming? Can you provide examples of both paradigms?",
            "What is the purpose of Scala's `Option` type, and how does it help in handling optional values?",
            "How do Scala's `Future` and `Promise` types support asynchronous programming?",
            "What are implicit conversions and parameters in Scala, and how are they used?",
            "How does Scala handle concurrency, and what tools or libraries are available for parallel processing?",
            "What are Scala's collections, and how do they differ from Java collections?",
            "Can you explain the concept of Scala's pattern matching with `match` expressions and guards?",
            "What is the role of Scala's `lazy` keyword, and how does lazy evaluation work?",
            "How does Scala's type system support generic programming and type constraints?",
            "What are some common best practices for writing idiomatic Scala code?"
        ],
        "Swift": [
            "What are the main differences between Swift and Objective-C?",
            "Can you explain the concept of optionals in Swift and how they help with handling nil values?",
            "How does Swift handle memory management? What is Automatic Reference Counting (ARC)?",
            "What are Swift's value types and reference types? Provide examples of each.",
            "How do you define and use structs and classes in Swift? What are the key differences?",
            "What is the purpose of Swift's `enum` types, and how do you use them?",
            "Can you explain how Swift's protocol-oriented programming differs from object-oriented programming?",
            "What are Swift's closures, and how do they capture values? Provide an example.",
            "How does Swift support error handling? What are `try`, `catch`, `throw`, and `defer`?",
            "What are Swift's `guard` statements, and how do they differ from `if` statements?",
            "How do you perform asynchronous programming in Swift using `async` and `await`?",
            "What is the role of Swift's `deinit` method, and when is it called?",
            "Can you explain Swift's type inference and how it affects variable declarations?",
            "How does Swift's optional chaining work, and when would you use it?",
            "What are Swift's key collections types, such as `Array`, `Dictionary`, and `Set`, and how are they used?",
            "How does Swift handle inheritance and method overriding? What are the `override` and `final` keywords?",
            "What are Swift's functional programming features, such as `map`, `filter`, and `reduce`?",
            "How does Swift support concurrency and parallelism? What are `DispatchQueue` and `Task`?",
            "What are some best practices for writing clean and efficient Swift code?"
        ],
        "SQL": [
            "What is the purpose of SQL, and what are some common SQL commands used for data manipulation?",
            "Can you explain the difference between `INNER JOIN`, `LEFT JOIN`, `RIGHT JOIN`, and `FULL JOIN`? Provide examples of each.",
            "How do you write a SQL query to select all columns from a table named `employees`?",
            "How would you write a query to find the total number of records in a table named `orders`?",
            "What is a subquery, and how would you use it to select all customers who have made more than 5 orders?",
            "How do you use the `GROUP BY` clause in SQL? Write a query to count the number of orders for each customer.",
            "What is the purpose of the `HAVING` clause, and how does it differ from the `WHERE` clause? Provide an example.",
            "Write a SQL query to retrieve the names of employees who have a salary greater than $50,000 from the `employees` table.",
            "How do you use SQL functions to calculate the average salary from a table named `employees`?",
            "Write a SQL query to find all products from the `products` table where the price is between $10 and $50.",
            "What is the purpose of the `UNION` operator in SQL? How does it differ from `UNION ALL`?",
            "Write a SQL query to update the salary of an employee with `employee_id` 123 to $60,000.",
            "How do you create a new table in SQL with columns for `id`, `name`, and `email`?",
            "Write a SQL query to delete all records from the `orders` table where the `order_date` is older than January 1, 2023.",
            "What is indexing in SQL, and how can it improve query performance? Provide an example of creating an index.",
            "How do you use the `ORDER BY` clause to sort results in descending order? Write a query to list all products sorted by price in descending order.",
            "What is a SQL view, and how do you create one? Write a query to create a view that shows customer names and their total order amounts.",
            "How do you use the `DISTINCT` keyword in SQL? Write a query to select unique job titles from the `employees` table.",
            "Write a SQL query to join two tables, `orders` and `customers`, on the `customer_id` field and select the customer name and order amount.",
            "What are transactions in SQL, and what are some common commands used to manage them (e.g., `BEGIN`, `COMMIT`, `ROLLBACK`)?"
        ],
        "PHP": [
            "What are the key differences between PHP and other programming languages like JavaScript or Python?",
            "How does PHP handle error reporting and what are the different error levels you can use?",
            "What are PHP sessions and cookies, and how do they differ? Provide examples of usage.",
            "How do you connect to a MySQL database using PHP? Write a sample code snippet to establish a connection.",
            "What is the purpose of PHP's `include` and `require` statements, and how do they differ?",
            "How do you handle form data in PHP? Write a PHP script to process form input data safely.",
            "What are PHP's superglobals, and how are they used? Provide examples of `$_GET`, `$_POST`, and `$_SESSION`.",
            "Can you explain the difference between `GET` and `POST` methods in PHP? When would you use each?",
            "How does PHP handle file uploads? Write a PHP script to handle file uploads and save the file to the server.",
            "What are PHP's error handling functions like `try`, `catch`, and `finally`? Provide examples of how to use them.",
            "How do you use PHP's built-in functions to work with arrays? Provide examples of functions like `array_merge`, `array_map`, and `array_filter`.",
            "What is PHP's `mysqli` extension, and how does it differ from `PDO`? Write a query using `mysqli` to retrieve data from a table.",
            "How do you use PHP sessions to store user data across multiple pages? Write a sample script to start a session and set session variables.",
            "What are PHP's data types and type casting? Provide examples of converting between different data types.",
            "How do you sanitize user input in PHP to prevent SQL injection attacks? Provide examples using prepared statements.",
            "What is the purpose of PHP's `composer` and how do you use it to manage dependencies?",
            "How does PHP support object-oriented programming? Explain the use of classes, objects, inheritance, and polymorphism with examples.",
            "What are PHP's magic methods, and what are some commonly used ones like `__construct` and `__destruct`?",
            "How do you perform string manipulation in PHP? Provide examples of functions like `strpos`, `substr`, and `str_replace`.",
            "What are PHP's best practices for writing secure code? Discuss methods to prevent common vulnerabilities like XSS and CSRF."
        ],
        "Databases": [
            "What are the key differences between SQL and NoSQL databases?",
            "Can you explain the concept of normalization and why it is important in relational databases?",
            "What are the ACID properties in database transactions, and why are they important?",
            "What is a database schema, and how does it relate to tables, fields, and relationships?",
            "Can you explain the concept of indexing in databases? How does it improve query performance?",
            "What are foreign keys, and how do they maintain referential integrity in a relational database?",
            "How does a database management system (DBMS) handle concurrency control and prevent data anomalies?",
            "What is the purpose of SQL joins, and can you describe the differences between INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL JOIN?",
            "What are database views, and how are they used to simplify complex queries and enhance security?",
            "Can you explain the difference between a primary key and a unique key in a relational database?",
            "What are some common database backup and recovery strategies? Why is database backup important?",
            "How do transactions work in databases, and what are some common transaction isolation levels?",
            "What is denormalization, and when might it be used in a database design?",
            "Can you describe what a database trigger is and provide an example of how it might be used?",
            "What is the purpose of database constraints, and what are some common types of constraints (e.g., NOT NULL, UNIQUE, CHECK)?",
            "How do you handle large volumes of data in a database? What strategies or technologies are used for scalability?",
            "What are stored procedures and functions in SQL, and how do they differ from one another?",
            "Can you explain the concept of database sharding and how it helps in scaling a database system?",
            "What is the difference between OLAP and OLTP databases, and what are their typical use cases?"
        ],
        "MultithreadingAsync": [
            "What is multithreading, and how does it differ from multiprocessing?",
            "Can you explain the concept of thread safety and why it is important in concurrent programming?",
            "What are some common synchronization mechanisms used in multithreaded applications (e.g., locks, semaphores, mutexes)?",
            "How does the `Thread` class work in various programming languages (e.g., Java, Python, C#)? Provide examples.",
            "What are race conditions, and how can they be prevented in a multithreaded environment?",
            "What is a deadlock, and how can it be avoided in a concurrent system?",
            "Can you explain the concept of context switching and its impact on system performance?",
            "What is asynchronous programming, and how does it differ from synchronous programming?",
            "How do promises and futures work in asynchronous programming? Provide examples in languages like JavaScript or Python.",
            "What are callbacks, and how are they used in asynchronous programming? What are some of their limitations?",
            "How does the `async` and `await` keywords work in modern programming languages like JavaScript and Python?",
            "What are some common design patterns for handling concurrency (e.g., producer-consumer, observer pattern)?",
            "Can you explain the concept of an event loop and its role in asynchronous programming? How is it implemented in Node.js or similar environments?",
            "What is the purpose of task parallelism, and how does it differ from data parallelism?",
            "How do you handle errors and exceptions in asynchronous code? What strategies or tools are available?",
            "What are some best practices for optimizing multithreaded and asynchronous applications?",
            "How do thread pools work, and what are their advantages compared to creating and destroying threads dynamically?",
            "Can you explain how coroutines work and their advantages in managing asynchronous tasks?",
            "What are some common libraries or frameworks for handling concurrency and asynchronous programming in various languages (e.g., Java's `java.util.concurrent`, Python's `asyncio`, C#'s `Task`)?"
        ]
    }
}